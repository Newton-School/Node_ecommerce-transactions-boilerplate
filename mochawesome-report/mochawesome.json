{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-13T09:51:03.358Z",
    "end": "2023-03-13T09:51:10.252Z",
    "duration": 6894,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e3216c4d-a543-4750-9f22-cab21692f272",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1b21d06-3d45-4e6e-831e-1b9d50516d9f",
          "title": "Checking Cart Routes",
          "fullFile": "/media/aditya/Personal Files/Newton/transactions/ecommerce-transactions/__tests__/test.js",
          "file": "/__tests__/test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Checking Cart Routes\"",
              "fullTitle": "Checking Cart Routes \"before all\" hook in \"Checking Cart Routes\"",
              "timedOut": false,
              "duration": 4754,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connect(process.env.DATABASE_URL || \"mongodb://localhost:27017/ecommerce\", { useNewUrlParser: true, useUnifiedTopology: true });\nconsole.log('connected to DB');\nawait seedWithDummyData();\nuser = await User.create({\n    username: 'testuser',\n    email: 'testuser@example.com',\n    password: 'testpassword',\n});\nproduct = await Product.create({\n    name: 'Shoes',\n    description: 'Comfortable shoes for everyday use',\n    price: 49.99,\n    category: 'Footwear'\n}\n);",
              "err": {},
              "uuid": "27699fbc-a67c-48fd-ba37-2f8d50f29c3f",
              "parentUUID": "e1b21d06-3d45-4e6e-831e-1b9d50516d9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Checking Cart Routes\"",
              "fullTitle": "Checking Cart Routes \"after all\" hook in \"Checking Cart Routes\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.disconnect();\nconsole.log('disconnected DB')",
              "err": {},
              "uuid": "cab9fe30-7fcf-4f5b-bac3-1986444ea2a4",
              "parentUUID": "e1b21d06-3d45-4e6e-831e-1b9d50516d9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b4382ab8-e1d3-4af1-9676-7e0cc4093472",
              "title": "POST /api/v1/transactions",
              "fullFile": "/media/aditya/Personal Files/Newton/transactions/ecommerce-transactions/__tests__/test.js",
              "file": "/__tests__/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a transaction successfully",
                  "fullTitle": "Checking Cart Routes POST /api/v1/transactions should create a transaction successfully",
                  "timedOut": false,
                  "duration": 1606,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const order = await Order.create({\n    user: user._id,\n    products: [{\n      product: product._id,\n      quantity: 2\n    }],\n    totalPrice: 100,\n    shippingAddress: '123 Main St',\n    paymentMethod: 'upi',\n    status: 'pending'\n  });\nconst body = {\n    orderId: order._id,\n    paymentMethod: 'upi',\n    amount: 100\n};\nconst res = await chai.request(app)\n    .post('/api/v1/transactions')\n    .send(body);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.a('object');\n// expect(res.body).to.have.property('message').eql('Transaction created successfully');\nexpect(res.body).to.have.property('status').eql('Success');\nexpect(res.body).to.have.property('transaction');\nexpect(res.body.transaction).to.have.property('order').eql(order._id.toString());\nexpect(res.body.transaction).to.have.property('paymentMethod').eql('upi');\nexpect(res.body.transaction).to.have.property('amount').eql(100);\nconst updatedOrder = await Order.findById(order._id);\nexpect(updatedOrder).to.have.property('status').eql('paid');",
                  "err": {},
                  "uuid": "96998c91-49e9-4f14-b8d6-304798219e2a",
                  "parentUUID": "b4382ab8-e1d3-4af1-9676-7e0cc4093472",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error when missing required fields",
                  "fullTitle": "Checking Cart Routes POST /api/v1/transactions should return an error when missing required fields",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const body = {\n    paymentMethod: 'credit card',\n    amount: 50\n};\nconst res = await chai.request(app)\n    .post('/api/v1/transactions')\n    .send(body);\nexpect(res).to.have.status(400);\nexpect(res.body).to.be.a('object');\n// expect(res.body).to.have.property('message').eql('Missing required fields');\nexpect(res.body).to.have.property('status').eql('Error');",
                  "err": {},
                  "uuid": "5c75e1aa-1dc5-4fba-a82d-f6b5a901e7f2",
                  "parentUUID": "b4382ab8-e1d3-4af1-9676-7e0cc4093472",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error when order is not found",
                  "fullTitle": "Checking Cart Routes POST /api/v1/transactions should return an error when order is not found",
                  "timedOut": false,
                  "duration": 516,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const body = {\n    orderId: mongoose.Types.ObjectId(),\n    paymentMethod: 'credit card',\n    amount: 50\n};\nconst res = await chai.request(app)\n    .post('/api/v1/transactions')\n    .send(body);\nexpect(res).to.have.status(404);\nexpect(res.body).to.be.a('object');\n// expect(res.body).to.have.property('message').eql('Order not found');\nexpect(res.body).to.have.property('status').eql('Error');",
                  "err": {},
                  "uuid": "343cc0f6-6aa2-4c98-9e29-9215f9aad564",
                  "parentUUID": "b4382ab8-e1d3-4af1-9676-7e0cc4093472",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96998c91-49e9-4f14-b8d6-304798219e2a",
                "5c75e1aa-1dc5-4fba-a82d-f6b5a901e7f2",
                "343cc0f6-6aa2-4c98-9e29-9215f9aad564"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2126,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}